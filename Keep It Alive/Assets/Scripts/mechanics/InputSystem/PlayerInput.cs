//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Mechanics/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""SpiritActions"",
            ""id"": ""e97628ec-982e-45bb-afbb-538cb4cb31b7"",
            ""actions"": [
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""0d0d33e1-4d6d-42b9-99da-c02a1d42cef2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CommandRally"",
                    ""type"": ""Button"",
                    ""id"": ""5311fcfd-f74c-407e-a234-bcb33393ebc3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CommandAttack"",
                    ""type"": ""Button"",
                    ""id"": ""b2bc4a21-a3a8-4266-a974-d7c29a8ca930"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CommandDodge"",
                    ""type"": ""Button"",
                    ""id"": ""fc978232-732f-4397-8f01-0b67825e7fe4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""5790c041-9db2-4214-8448-f9f3390a55f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CommandStandStill"",
                    ""type"": ""Button"",
                    ""id"": ""3168745a-15e0-4096-9d79-3d2d0c466b88"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""63ed803c-4a99-4940-af76-8796bd9b5f8e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f1f7bae-1aef-4840-a57b-fce4cc4cd206"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CommandRally"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7976a96-f179-44ab-aef2-9d34429da8aa"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CommandAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb42c0de-b4e4-4cbd-a4f0-269fde5eeabb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CommandDodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f05ad3f0-a082-4929-ba40-d635824e1a08"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fec4d8b-05d7-46fa-bc61-378cf8c719c0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CommandStandStill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SpiritActions
        m_SpiritActions = asset.FindActionMap("SpiritActions", throwIfNotFound: true);
        m_SpiritActions_Teleport = m_SpiritActions.FindAction("Teleport", throwIfNotFound: true);
        m_SpiritActions_CommandRally = m_SpiritActions.FindAction("CommandRally", throwIfNotFound: true);
        m_SpiritActions_CommandAttack = m_SpiritActions.FindAction("CommandAttack", throwIfNotFound: true);
        m_SpiritActions_CommandDodge = m_SpiritActions.FindAction("CommandDodge", throwIfNotFound: true);
        m_SpiritActions_CursorPosition = m_SpiritActions.FindAction("CursorPosition", throwIfNotFound: true);
        m_SpiritActions_CommandStandStill = m_SpiritActions.FindAction("CommandStandStill", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_SpiritActions.enabled, "This will cause a leak and performance issues, PlayerInput.SpiritActions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpiritActions
    private readonly InputActionMap m_SpiritActions;
    private List<ISpiritActionsActions> m_SpiritActionsActionsCallbackInterfaces = new List<ISpiritActionsActions>();
    private readonly InputAction m_SpiritActions_Teleport;
    private readonly InputAction m_SpiritActions_CommandRally;
    private readonly InputAction m_SpiritActions_CommandAttack;
    private readonly InputAction m_SpiritActions_CommandDodge;
    private readonly InputAction m_SpiritActions_CursorPosition;
    private readonly InputAction m_SpiritActions_CommandStandStill;
    public struct SpiritActionsActions
    {
        private @PlayerInput m_Wrapper;
        public SpiritActionsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Teleport => m_Wrapper.m_SpiritActions_Teleport;
        public InputAction @CommandRally => m_Wrapper.m_SpiritActions_CommandRally;
        public InputAction @CommandAttack => m_Wrapper.m_SpiritActions_CommandAttack;
        public InputAction @CommandDodge => m_Wrapper.m_SpiritActions_CommandDodge;
        public InputAction @CursorPosition => m_Wrapper.m_SpiritActions_CursorPosition;
        public InputAction @CommandStandStill => m_Wrapper.m_SpiritActions_CommandStandStill;
        public InputActionMap Get() { return m_Wrapper.m_SpiritActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpiritActionsActions set) { return set.Get(); }
        public void AddCallbacks(ISpiritActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_SpiritActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpiritActionsActionsCallbackInterfaces.Add(instance);
            @Teleport.started += instance.OnTeleport;
            @Teleport.performed += instance.OnTeleport;
            @Teleport.canceled += instance.OnTeleport;
            @CommandRally.started += instance.OnCommandRally;
            @CommandRally.performed += instance.OnCommandRally;
            @CommandRally.canceled += instance.OnCommandRally;
            @CommandAttack.started += instance.OnCommandAttack;
            @CommandAttack.performed += instance.OnCommandAttack;
            @CommandAttack.canceled += instance.OnCommandAttack;
            @CommandDodge.started += instance.OnCommandDodge;
            @CommandDodge.performed += instance.OnCommandDodge;
            @CommandDodge.canceled += instance.OnCommandDodge;
            @CursorPosition.started += instance.OnCursorPosition;
            @CursorPosition.performed += instance.OnCursorPosition;
            @CursorPosition.canceled += instance.OnCursorPosition;
            @CommandStandStill.started += instance.OnCommandStandStill;
            @CommandStandStill.performed += instance.OnCommandStandStill;
            @CommandStandStill.canceled += instance.OnCommandStandStill;
        }

        private void UnregisterCallbacks(ISpiritActionsActions instance)
        {
            @Teleport.started -= instance.OnTeleport;
            @Teleport.performed -= instance.OnTeleport;
            @Teleport.canceled -= instance.OnTeleport;
            @CommandRally.started -= instance.OnCommandRally;
            @CommandRally.performed -= instance.OnCommandRally;
            @CommandRally.canceled -= instance.OnCommandRally;
            @CommandAttack.started -= instance.OnCommandAttack;
            @CommandAttack.performed -= instance.OnCommandAttack;
            @CommandAttack.canceled -= instance.OnCommandAttack;
            @CommandDodge.started -= instance.OnCommandDodge;
            @CommandDodge.performed -= instance.OnCommandDodge;
            @CommandDodge.canceled -= instance.OnCommandDodge;
            @CursorPosition.started -= instance.OnCursorPosition;
            @CursorPosition.performed -= instance.OnCursorPosition;
            @CursorPosition.canceled -= instance.OnCursorPosition;
            @CommandStandStill.started -= instance.OnCommandStandStill;
            @CommandStandStill.performed -= instance.OnCommandStandStill;
            @CommandStandStill.canceled -= instance.OnCommandStandStill;
        }

        public void RemoveCallbacks(ISpiritActionsActions instance)
        {
            if (m_Wrapper.m_SpiritActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpiritActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_SpiritActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpiritActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpiritActionsActions @SpiritActions => new SpiritActionsActions(this);
    public interface ISpiritActionsActions
    {
        void OnTeleport(InputAction.CallbackContext context);
        void OnCommandRally(InputAction.CallbackContext context);
        void OnCommandAttack(InputAction.CallbackContext context);
        void OnCommandDodge(InputAction.CallbackContext context);
        void OnCursorPosition(InputAction.CallbackContext context);
        void OnCommandStandStill(InputAction.CallbackContext context);
    }
}
